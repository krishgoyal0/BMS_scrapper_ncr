name: BookMyShow Event Scraper

on:
  schedule:
    - cron: '0 9,20 * * *'
  workflow_dispatch:

permissions:
  contents: write # Needed for committing and pushing changes

jobs:
  scrape-and-process:
    runs-on: ubuntu-latest
    
    steps:
    # --- Setup ---
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: true # Good for pushing changes

    # --- Environment ---
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Ensure this matches your local Python version if specific packages are compiled

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        playwright install chromium
        playwright install-deps
        # Install jq for JSON validation in the debug step
        sudo apt-get update && sudo apt-get install -y jq

    # --- Scraping Pipeline ---
    - name: Run URL fetcher
      run: python 01_url_fetcher.py

    - name: Run screenshot capture
      run: python 02_url_to_ss.py

    - name: Run OCR processing
      run: python 03_ss_to_json.py

    - name: Convert to Excel
      run: python 04_json_to_excel.py

    # --- Google Sheets Upload ---
        # --- Google Sheets Upload ---
    - name: Create service_account.json from secret
      env:
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
      run: |
        # Write the secret content to file
        echo "$GOOGLE_SERVICE_ACCOUNT_KEY" > service_account.json
        
        # Validate the JSON format
        if ! python -c "import json; json.load(open('service_account.json'))"; then
          echo "Error: Invalid JSON in service account file"
          echo "File content:"
          cat service_account.json
          exit 1
        fi
        
        echo "Service account file created successfully:"
        ls -la service_account.json

    - name: Upload to Google Sheets
      run: python 05_upload_to_sheets.py
      env:
        GOOGLE_CREDENTIALS_PATH: ./service_account.json


    # --- Git Operations ---
    - name: Commit changes
      id: commit # Keep the ID for conditional push
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Add all relevant output files (assuming events.xlsx is generated/modified)
        git add data/ reports/ events.xlsx 
        
        if git diff --cached --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes to commit."
        else
          git commit -m "Auto-update: Event data [skip ci]"
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes committed."
        fi

    - name: Push changes
      if: steps.commit.outputs.changes == 'true' # Only push if changes were committed
      run: |
        # Pull with rebase to get latest changes and reapply yours,
        # which is safer than just rebase followed by push.
        git pull --rebase origin main # Assuming 'main' is your default branch
        git push

    # --- Artifacts ---
    - name: Archive results
      uses: actions/upload-artifact@v4
      with:
        name: event-reports
        path: |
          reports/
          screenshots/
          events.xlsx
